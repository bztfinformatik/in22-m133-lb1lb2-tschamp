Test/test_app.py

1. Routentests
Szenario: Admin kann Termine anzeigen
    Testfall 1.1: Admin besucht /admin/dashboard/termine
        Erwartet: HTTP-Statuscode 200 und eine Liste der Termine wird angezeigt.
    Testfall 1.2: Unautorisierter Benutzer besucht /admin/dashboard/termine
        Erwartet: HTTP-Statuscode 302 (Redirect) und Flash-Meldung "Access denied!".
Szenario: Eltern können Termine claimen
    Testfall 1.3: Parent besucht /parent/dashboard und sieht verfügbare Termine.
        Erwartet: HTTP-Statuscode 200 und eine Liste von verfügbaren Terminen.
    Testfall 1.4: Parent versucht einen Termin zu claimen.
        Erwartet: Termin wird korrekt dem Parent zugeordnet und verschwindet aus der Liste.
2. Datenbanktests
Szenario: CRUD-Operationen für Termine
    Testfall 2.1: Termin erstellen
        Erwartet: Ein neuer Termin wird in der Datenbank gespeichert.
    Testfall 2.2: Termin bearbeiten
        Erwartet: Änderungen an einem Termin werden korrekt in der Datenbank gespeichert.
    Testfall 2.3: Termin löschen
        Erwartet: Ein Termin wird aus der Datenbank gelöscht.
Szenario: Claiming von Terminen
    Testfall 2.4: Termin wird von einem Parent geclaimed
        Erwartet: Das Feld parent_id des Termins wird korrekt gesetzt.
3. Berechtigungstests
Szenario: Zugriffsbeschränkungen
    Testfall 3.1: Lehrer versucht auf Admin-Seite zuzugreifen
        Erwartet: HTTP-Statuscode 302 (Redirect) und Flash-Meldung "Access denied!".
    Testfall 3.2: Admin kann auf alle Seiten zugreifen
        Erwartet: HTTP-Statuscode 200 für alle relevanten Admin-Routen.
4. End-to-End-Tests
Szenario: Termin-Workflow
    Testfall 4.1: Admin erstellt einen Termin
        Erwartet: Termin wird in der Admin-Oberfläche korrekt angezeigt.
    Testfall 4.2: Parent claimt einen Termin
        Erwartet: Der Termin wird nicht mehr in der Liste verfügbarer Termine angezeigt.
    Testfall 4.3: Lehrer bearbeitet einen Termin
        Erwartet: Die Änderungen werden korrekt in der Lehrer-Oberfläche angezeigt.